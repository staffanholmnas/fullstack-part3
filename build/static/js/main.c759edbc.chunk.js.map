{"version":3,"sources":["components/Persons.js","components/Filter.js","components/PersonForm.js","services/phoneService.js","components/Notification.js","App.js","index.js"],"names":["Persons","props","copyOfPersons","persons","copyOfFilter","newFilter","filter","s","name","toUpperCase","includes","getMatches","map","line","key","id","number","onClick","deleteperson","Filter","value","onChange","PersonForm","onSubmit","nameValue","nameOnChange","numberValue","numberOnChange","type","baseUrl","axios","get","then","response","data","newObject","post","delete","put","Notification","message","className","greenBorder","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setNewFilter","newMessage","setNewMessage","useEffect","phoneService","initialPersons","event","target","preventDefault","personObject","person","window","confirm","find","item","updatedPerson","catch","error","messageObject","setTimeout","returnedPerson","concat","index","indexOf","splice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c759edbc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Persons = (props) => {\r\n\r\n  const getMatches = () => {\r\n\r\n    let copyOfPersons = [...props.persons]\r\n    let copyOfFilter = props.newFilter\r\n\r\n    let personObjects = copyOfPersons.filter(s => s.name.toUpperCase()\r\n      .includes(copyOfFilter.toUpperCase()))\r\n\r\n    // Add this commented out code if no numbers should be shown before filtering\r\n    /*\r\n    if (copyOfFilter.length === 0) {\r\n      return []\r\n    }*/\r\n\r\n    return personObjects\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {getMatches()\r\n        .map(line => {\r\n          return (\r\n            <div key={line.id}>\r\n              {line.name}\r\n              {\" \"}\r\n              {line.number}\r\n              <button onClick={() => props.deleteperson(line.id, line.name)}>delete</button>\r\n            </div>\r\n          )\r\n        })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Persons\r\n","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n      <div>\r\n        filter shown with <input\r\n          value={props.value}\r\n          onChange={props.onChange} />\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Filter\r\n","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n      <>\r\n        <form onSubmit={props.onSubmit}>\r\n          <div>\r\n            name: <input\r\n              value={props.nameValue}\r\n              onChange={props.nameOnChange}\r\n            />\r\n          </div>\r\n          <div>\r\n            number: <input\r\n              value={props.numberValue}\r\n              onChange={props.numberOnChange}\r\n            />\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n        </form>\r\n      </>\r\n    )\r\n  }\r\n\r\nexport default PersonForm\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteObject = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, deleteObject, update }\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className={message.greenBorder ? \"added\" : \"error\"}>\r\n        {message.message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification\r\n  ","import React, { useState, useEffect } from 'react'\r\nimport Persons from './components/Persons'\r\nimport Filter from './components/Filter'\r\nimport PersonForm from './components/PersonForm'\r\nimport phoneService from './services/phoneService'\r\nimport Notification from './components/Notification'\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [newFilter, setNewFilter] = useState('')\r\n  const [newMessage, setNewMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    phoneService\r\n      .getAll()\r\n      .then(initialPersons => {\r\n        setPersons(initialPersons)\r\n      })\r\n  }, [])\r\n\r\n  const deletePerson = (id, name) => {\r\n    if (window.confirm(`Delete ${name} ?`)) {\r\n      let index = persons.map(find => find.id).indexOf(id)\r\n      phoneService\r\n        .deleteObject(id)\r\n        .then()\r\n        .catch(error => {\r\n          const messageObject = {\r\n            message: `${name} has already been deleted from server`,\r\n            greenBorder: false\r\n          }\r\n          setNewMessage(messageObject)\r\n          setTimeout(() => {\r\n            setNewMessage(null)\r\n          }, 5000)\r\n        })\r\n      const copyOfPersons = [...persons]\r\n      copyOfPersons.splice(index, 1)\r\n      setPersons(copyOfPersons)\r\n      setNewName(\"\")\r\n      setNewNumber(\"\")\r\n    }\r\n  }\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n    const personObject = {\r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n\r\n    if (persons.map(person =>\r\n      person.name)\r\n      .includes(newName)) {\r\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n        let getID = persons.find(item => item.name === newName)\r\n        let id = getID.id\r\n        phoneService\r\n          .update(id, personObject)\r\n          .then(updatedPerson => {\r\n            setPersons(persons.map(person => person.id !== id ? person : updatedPerson))\r\n            setNewName(\"\")\r\n            setNewNumber(\"\")\r\n          })\r\n          .catch(error => {\r\n            const messageObject = {\r\n              message: `Information of ${personObject.name} has already been removed from server`,\r\n              greenBorder: false\r\n            }\r\n            setNewMessage(messageObject)\r\n            setTimeout(() => {\r\n              setNewMessage(null)\r\n            }, 5000)\r\n            setNewName(\"\")\r\n            setNewNumber(\"\")\r\n          })\r\n      }\r\n    }\r\n    else {\r\n      phoneService\r\n        .create(personObject)\r\n        .then(returnedPerson => {\r\n          setPersons(persons.concat(returnedPerson))\r\n          setNewName(\"\")\r\n          setNewNumber(\"\")\r\n          const messageObject = {\r\n            message: `Added ${personObject.name}`,\r\n            greenBorder: true\r\n          }\r\n          setNewMessage(messageObject)\r\n          setTimeout(() => {\r\n            setNewMessage(null)\r\n          }, 5000)\r\n        })\r\n    }\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  const handleFilterChange = (event) => {\r\n    setNewFilter(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={newMessage} />\r\n      <Filter value={newFilter} onChange={handleFilterChange} />\r\n      <h3>add a new</h3>\r\n      <PersonForm\r\n        onSubmit={addPerson}\r\n        nameValue={newName}\r\n        nameOnChange={handleNameChange}\r\n        numberValue={newNumber}\r\n        numberOnChange={handleNumberChange}\r\n      />\r\n      <h3>Numbers</h3>\r\n      <Persons persons={persons} newFilter={newFilter} deleteperson={deletePerson} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}